#!/bin/bash

EXIT_OK=0
EXIT_WARNING=1
EXIT_CRITICAL=2
EXIT_UNKNOWN=3

die() {
  echo "${@:2}"
  exit $1
}

usage() {
  echo "Usage: $(basename $0) [-h|--help] -k|--key <KEY> -w|--warning <WARNGING> -c|--critical <CRITICAL> <MENU>"
  echo ""
  echo "Arguments"
  echo "  -h, --help       Display this help page"
  echo "  -k, --key        BandwagonHost api key"
  echo "  -w, --warning    Warning threshold"
  echo "  -c, --critical   Critical threshold"
  echo "  <MENU>           Which menu to check, only support 'bandwidth' now"
  exit $EXIT_UNKNOWN
}

while (( ${#@} > 0 )) ; do
  case $1 in
    -h|--help     ) usage ;;
    -k|--key      ) shift; key=$1 ;;
    -w|--warning  ) shift; warning=$1 ;;
    -c|--critical ) shift; critical=$1 ;;
    *             ) if [[ $1 =~ ^bandwidth$ ]]; then menu=$1; else die 1 "Unsupport menu '$1' to check"; fi ;;
  esac
  shift
done

if [[ ! -v warning ]] || [[ ! -v critical ]]; then
  usage
fi

if [[ ! -v key ]]; then
  die $EXIT_UNKNOWN "No api key provided"
fi

if [[ ! -v menu ]]; then
  die $EXIT_UNKNOWN "No <MENU> provided."
fi

case $menu in
  bandwidth )
    value=$(curl --silent --location --request GET "https://api.64clouds.com/v1/getServiceInfo?veid=1454559&api_key=$key" | jq '.data_counter / 1000 / 1000 / 1000')
    if (( $(bc <<< "$value >= $critical") == 1 )); then
      die $EXIT_CRITICAL "Bandwidth CRITICAL: ${value}G has been used"
    elif (( $(bc <<< "$value >= $warning") == 1 )); then
      die $EXIT_WARNING "Bandwidth WARNING: ${value}G has been used"
    else
      die $EXIT_OK "Bandwidth OK: ${value}G has been used"
    fi
    ;;
esac
