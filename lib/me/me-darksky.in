#!/usr/bin/env python3
# Weather report

import os
import sys
import json
import locale
import datetime
import urllib.request

CONF_DIR = "M4_ETC_DIR/me-darksky.d"
CONF_VAR = {"KEY", "LANG", "LATITUDE", "LONGTITUDE", "UNITS"}
API_URL = "https://api.darksky.net/forecast/{KEY}/{LATITUDE},{LONGTITUDE}?lang={LANG}&units={UNITS}"


def die(msg):
    print(msg)
    sys.exit(1)

def usage():
        die(
"""Usage: me-darksky -c <CONF> [-d <DAY>]

Options:
  -d, --day  <DAY>          DAY can be 'today' or 'tomorrow', if this option is not set, all days will be used
  -c, --conf <CONF>         Specify configuration file""")
 

def parse_conf():
    global report_today_prefix
    global report_tomorrow_prefix
    global report_template
    global report_brief_template
    exec(open(conf).read())

    if not(CONF_VAR.issubset(locals())):
        die("Lack of some required variables.")

    for var in CONF_VAR:
        globals()[var] = locals()[var]

    if LANG == "en":
        report_today_prefix = "<Today> "
        report_tomorrow_prefix = "<Tomorrow> "
        report_template = (
            "{date} ({icon}): {summary} "
            "Direction of wind is {windBearing}, speed of wind is {windSpeed}km/h."
            "Minmum temperature is {apparentTemperatureMin}°C around at {apparentTemperatureMinTime}, "
            "Maximum temperature is {apparentTemperatureMax}°C around at {apparentTemperatureMaxTime}. "
            "Time of sunrise is {sunriseTime}, time of sunset is {sunsetTime}."
            "Moon phase (0-1) is {moonPhase}."
            "Humidity (0-1) is {humidity}."
            "Sky occluded by clouds (0-1) is {cloudCover}."
            "Precipitation intensity is {precipIntensity}.\n")
        report_brief_template = (
            "{date} ({icon}): {summary} "
            "Direction of wind is {windBearing}, speed of wind is {windSpeed}km/h."
            "Temperature is about {apparentTemperatureMin}°C-{apparentTemperatureMax}°C.\n"
        )
        try: locale.setlocale(locale.LC_ALL, "en_US.UTF-8")
        except locale.Error: pass
    elif LANG == "zh":
        report_today_prefix = "<今日> "
        report_tomorrow_prefix = "<明日> "
        report_template = (
            "{date} ({icon})： {summary}"
            "{windBearing}风{windSpeed}km/h。"
            "{apparentTemperatureMinTime}点气温最低为{apparentTemperatureMin}°C，"
            "{apparentTemperatureMaxTime}点气温最高为{apparentTemperatureMax}°C。"
            "日出为{sunriseTime}，日落为{sunsetTime}。"
            "月相 (0-1) 为 {moonPhase}。"
            "湿度 (0-1) 为 {humidity}。"
            "云层 (0-1) 为 {cloudCover}。"
            "降水量密度为 {precipIntensity}mm/h。\n")
        report_brief_template = (
            "{date} ({icon})： {summary}"
            "{windBearing}风{windSpeed}km/h。"
            "温度{apparentTemperatureMin}°C-{apparentTemperatureMax}°C。\n"
        )
        try: locale.setlocale(locale.LC_ALL, "zh_CN.UTF-8")
        except locale.Error: pass
    else:
        die("Unknown value of configuration variable 'LANG': %s." % str(LANG))

    if UNITS not in ["auto", "ca", "uk2", "us", "si"]:
        die("Unknown value of configuration variable 'UNITS': %s." % str(UNITS))

    if type(LATITUDE) not in [int, float]:
        die("Type of configuration variable 'LATITUDE' must be int or float.")

    if LATITUDE > 90 or LATITUDE < -90:
        die("Value of configuration variable 'LATITUDE' is out of range: %s." %
            str(LATITUDE))

    if type(LONGTITUDE) not in [int, float]:
        die("Type of configuration variable 'LONGTITUDE' must be int or float.")

    if LONGTITUDE > 180 or LONGTITUDE < -180:
        die("Value of configuration variable 'LATITUDE' is out of range: %s." %
            str(LATITUDE))

def wind_direction(wind_bearing, lang="en"):
    direction = ""

    if 0 < wind_bearing < 180:
        if lang == "en": direction += "East"
        elif lang == "zh" : direction += "东"
    elif 180 < wind_bearing < 360:
        if lang == "en": direction += "West"
        elif lang == "zh" : direction += "西"

    if 0 <= wind_bearing < 90 or 270 < wind_bearing <= 360:
        if lang == "en": direction = "North" + direction
        elif lang == "zh" : direction += "北"
    elif 90 < wind_bearing < 270:
        if lang == "en": direction = "Sourth" + direction
        elif lang == "zh" : direction += "南"

    return direction or wind_bearing

def template_engine(template, data, day):
    tz = datetime.timezone(datetime.timedelta(hours=globals()["LONGTITUDE"] // 15))
    ts2h = lambda ts: datetime.datetime.fromtimestamp(ts, tz=tz).strftime("%H")
    ts2hm = lambda ts: datetime.datetime.fromtimestamp(ts, tz=tz).strftime("%H:%M")
    return template.format(**{
        "date": (datetime.datetime.now(tz)
                    + datetime.timedelta(days=day)).strftime("%Y/%m/%d %A"),
        "icon": data["icon"],
        "summary": data["summary"],
        "windSpeed": data["windSpeed"],
        "windBearing": wind_direction(data["windBearing"], lang=globals()["LANG"]),
        "apparentTemperatureMin": data["apparentTemperatureMin"],
        "apparentTemperatureMax": data["apparentTemperatureMax"],
        "apparentTemperatureMinTime": ts2h(data["apparentTemperatureMinTime"]),
        "apparentTemperatureMaxTime": ts2h(data["apparentTemperatureMaxTime"]),
        "sunsetTime": ts2hm(data["sunsetTime"]),
        "sunriseTime": ts2hm(data["sunriseTime"]),
        "windSpeed": data["windSpeed"],
        "windBearing": wind_direction(data["windBearing"], lang=globals()["LANG"]),
        "humidity": data["humidity"],
        "moonPhase": data["moonPhase"],
        "cloudCover": data["cloudCover"],
        "precipIntensity": data["precipIntensity"],
    })

def generate_report(day="all"):
    with urllib.request.urlopen(API_URL.format(**globals())) as resp:
        data = json.loads(resp.read())
        if day == "today":
            report = report_today_prefix
            report += template_engine(report_template, data["daily"]["data"][0], 0)
        elif day == "tomorrow":
            report = report_tomorrow_prefix
            report += template_engine(report_template, data["daily"]["data"][1], 1)
        elif day == "all":
            report = ""
            for i, d in enumerate(data["daily"]["data"][0:]):
                report += template_engine(report_template if i == 0 else report_brief_template, d, i)
    return report


if __name__ == "__main__":
    def safe_pop(l, i):
        try: return l.pop(i)
        except IndexError: usage()

    # Init value
    conf, day = "", "all"
    # Parse arguments
    while sys.argv[1:]:
        arg = sys.argv.pop(1)
        if arg in ["-c", "--conf"]:
            conf = os.path.join(CONF_DIR, safe_pop(sys.argv, 1) + ".conf")
        elif arg in ["-d", "--day"]:
            day = safe_pop(sys.argv, 1)
        else:
            usage()

    if conf == "":
        usage()
    if not os.path.isfile(conf):
        die("Cannot find configuration file '%s'." % conf)
    if day not in ["today", "tomorrow", "all"]:
        die("Unknown value of argument day '%s', only support 'today' and 'tomorrow'." % day)

    parse_conf()
    print(generate_report(day))

